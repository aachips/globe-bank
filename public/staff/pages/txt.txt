header($string);
header("Content-Type: applicatoin/pdf");
header("HTTP/1.1 404 Not Found");
header("HTTP/1.1 500 Internal Server Error");

Headers are sent before all other page data. Changes must bve made before any HTML output. Even before a single space, line return, whitespace in included files, or after whitespace inside PHP tags. Headers must come first.
Any changes must come before modifying any data.

Page Redirection
302 redirect;
HTTP/1.1 302 Found
Location: path
    header("Location: login.php");

Example:
User submits user and password on loginPhp code checks user credentials
If its corerct, user sent to success page. If incorrect, sent to failure page

Page redirects are sent in headers. which are sent before page data. Header changes must be made before any HTML output
Page redicts must be sent before any HTML output

Output Buffering
Data in output buffer is editable. Headers can be changed. Whitespace can be sent before header edits and redirect.

Turn on buffering in php.ini file. Often on by default.  use phpinfo(); buffering enabled in characters. 4096 is good amount. 
4096 characters before headers get dumped into web Server

from php code ob_start()
ob_end_flush() - flush results into web server

Best to turn output buffering on in php.ini. Use ob_start when code may be ported to other servers. Rare we will need to flush manually.
Turn ob start on at start of initialize.php

Build Forms = most common ways
URLs/Links
Forms
GET
POSt

Use Form Parameters
    In superglobal variable: $_POST
    same as $_GET
    assigned by PHP before processing page code
    Do not need to encode form paramaters

$name = $_POST['name'];
$name = isset($_POST['name']) ? $_POST['name'] : ";
$n = $_POST['name'] ?? "; // PHP > 7.0

Detect Form Submission
Test if a key parameter has a value. See if submit parameter was sent. or if REQUEST_METHOD was post request. 
<?php if(isset($_POST['username']) )
{ // process form }

<input type="submit" name="submit" value="submit">

if(isset($_POST['submit'] {
    /process form }
))

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    /PROCESS Form

}

function request_is_post() {
    return $_SERVER['REQUEST_METHOD'] === 'POST'
}

if( request_is_post() ) {
    /process form
}

request_is_get()

function 


single-page form processing
all logic related to form is in one filere
display the form on errors
return error messages
populate fields with previous values

Database Advantages
    Read and write Data
    Store more data
    Keep data organized
    access data faster
    relate data to other data

MySQl
    Open source and free
    Easy to use
    Popular
    Good introduction to database concepts

Spreadsheets vs Database
    Spreadsheets are optimized for adding numbers
    Databases are optimized for working with data
    Databases can traverse relationships between tables
    Commands are used to interact with database

Database Terminology
    Database - set of tables. 
    One database = one applicatoin.
    Most times one database user - the web app

    table  
    Set of columns and rows
    Represents a single concept (a noun)
    Examples: products, customers, and orders
    Relationships between tables

    columns
        Set of data of a single simple type
        examples: first_name, last_name, email, password
        Has a single, for example, strings, integers, and boolean

    rows
    single record of data
    bob-smith-bob@email.com-secret

    fields
    intersection of a row and a columns

    primary key
    table column which provides a unique record identifier (id: 207)

    foreign key
    table column whose values references rows in another tablef
    foundation of relational Databases

    index
    data structure of a table to increase lookupspead
    like index at back of book
    primary and foreign most common indices

    CRUD
    create read update Delete
    four primary operations


    ## On terminal
    install MySQl
    log in : mysql -u root -p 56hM1ami34!$
    root user is most powerful user
    p asks for password

    SHOW Databases;
    all commands end in semicolon in mysql
    CREATE DATABASE db_name;
    USE db_name;
    DROP DATABASE db_name;
    SHOW DATABASES

    CREATE DATABASE aachipblog;
    GRANT ALL PRIVILEGES ON aachipblog . *
    TO 'aachips@localhost'
    IDENTIFIED BY 'password';

    SHOW TABLES;
    SHOW COLUMNS FROM table_name;
    DROP TABLE table_name;

    Create a Database table
    + Subjects
        - id: primary key
        - menu_name: string
        - position: integers
        - visible: boolean

    CREATE TABLE subjects (
        id INT(11) NOT NULL AUTO_INCREMENT,
        menu_name VARCHAR(255),
        position INT(3),
        visible TINYINT(1),
        PRIMARY KEY (id)
    );

    To use that database
    USE db_name;

    CREATE TABLE subjects (
        id INT(11) NOT NULL AUTO-INCREMENT,
        menu_name VARCHAR(255),
        position INT(3),
        visible TINYINT(1),
        PRIMARY KEY (id)
    );

CRUD in MySQl
create read update Delete

SELECT * 
FROM table
WHERE column1 = 'some-text'
ORDER BY column1 ASC;

SQL SELECT (Read)
    SELECT *
    FROM table
    WHERE column1 = 'some_text'
    ORDER BY column1 ASC;

SQL INSERT (Create)
    INSERT INTO table (col1, col2, col3)
    VALUES (val1, val2, val3);

SQL UPDATE (Update)
    UPDATE table
    SET col1 = 'this', col2 = 'that'
    WHERE id = 1;

SQL DELETE (Delete)
    DELETE FROM table
    WHERE id = 1;

Populate a Database

USE globe_bank;
SHOW TABLES;
SELECT * FROM subjects;
INSERT INTO subjects (id, menu_name, position, visible)
VALUES (1, 'About Globe Bank', 1, 1);
INSERT INTO subjects (menu_name, position, visible)
VALUES ('Consumer', 2, 1);
INSERT INTO subjects (menu_name, position, visible)
VALUES ('Small Business', 3, 1);

SELECT * FROM subjects WHERE id = 2;
SELECT * FROM subjects WHERE position = 3;
SELECT * FROM subjects WHERE position = 3 AND visible = 1;

UPDATE subjects SET position='4' WHERE id=3;

Relational Database tables

One-to-Many Relationships
Subject > Page * 4

table: subjects

<table>
    <tr>
        <td>id</td>
        <td>3</td>
    </tr>
    <tr>
        <td>menu_name</td>
        <td>"about globe bank"</td>
    </tr>
    <tr>
        <td>position</td>
        <td>2</td>
    </tr>
    <tr>
        <td>visible</td>
        <td>1</td>
    </tr>
</table>

table: pages

<table>
    <tr>
        <td>id</td>
        <td>12</td>
    </tr>
    <tr>
        <td>menu_name</td>
        <td>"History"</td>
    </tr>
    <tr>
        <td>position</td>
        <td>2</td>
    </tr>
    <tr>
        <td>visible</td>
        <td>TRUE</td>
    </tr>
    <tr>
        <td>content</td>
        <td>"Founded in 1950.."</td>
    </tr>
</table>

SQL ADD index  
    ALTER TABLE table
    ADD INDEX index_name (column);

    Primary Keys vs Foreign Keys
    Anytime you have a Foreign Key, put an Index on it

    
    Challenge: Pages table
        + Log into MySQl
        + Use the database globe_bank
        + Create a table for pages

        pages  
            id: primary key
            subject_id: integers
            menu_name: string
            position: integer
            visible: boolean
            content: text

        Add index on all foreign Keys
        Add data for pages

        Try CRUD SQL commands
        Find subjects by their primary key
        Find pages by their primary and foreign keys




table: subjects
<table border="1">
    <tr>
        <td>id</td>
        <td>3</td>
    </tr>
    <tr>
        <td>menu_name</td>
        <td>"about globe bank"</td>
    </tr>
    <tr>
        <td>position</td>
        <td>2</td>
    </tr>
    <tr>
        <td>visible</td>
        <td>1</td>
    </tr>
</table>

  

table: pages

<table border="1">
    <tr>
        <td>id</td>
        <td>12</td>
    </tr>
<tr>
        <td>subject_id</td>
        <td>3(foreign key)</td>
    </tr>

<tr>
        <td>menu_name</td>
        <td>"History"</td>
    </tr>
    <tr>
        <td>position</td>
        <td>2</td>
    </tr>
    <tr>
        <td>visible</td>
        <td>TRUE</td>
    </tr>
    <tr>
        <td>content</td>
        <td>"Founded in 1950.."</td>
    </tr>
</table>

CREATE TABLE table_name (
    column_name1 definition,
    column_name2 definition,
    column_name3 definition,
    options
);

SHOW TABLES;

SHOW COLUMNS FROM table_name;
DROP TABLE table_name;

Create a Database Table3
Subjects    
    id: primary key (every db table needs a primary key)
    menu_name: string
    position: integer
    visible: boolean

CREATE TABLE subjects (
    id INT(11) NOT NULL AUTO_INCREMENT,
    menu_name VARCHAR(255),
    position INT(3),
    visible TINYINT(1),
    PRIMARY KEY (id)
); 


Work with Retrieved Datamysqli_fetch_row
Work with Retrieved Datamysqli_fetch_assoc
    Returns associative array. Keys are column names. echo $subject['menu_name'];
Work with Retrieved Datamysqli_fetch_array

$result = find_all_subjects();

while($subject = mysqli_fetch_assoc($result)) 
    echo $subject['menu_name'];